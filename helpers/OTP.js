// const jwt = require('jsonwebtoken')
// // const env = require('dotenv').config({ path: __dirname + '/.env' })
// const bcrypt = require('bcrypt')
// const sendGrid = require('@sendgrid/mail')
// const userModel = require('../models/user-models/user-models')
// const HttpError = require('../models/error-model/runtime-error')
// const Mobile = require('../helpers/Twilio')
// sendGrid.setApiKey(
//   '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'
// )

// // SHORTHAND
// const fromEmail = process.env.SUPPORTMAIL

// const sendMail = async function (req, res) {
//   try {
//     const msg = {
//       to: req.body.email,
//       from: fromEmail,
//       subject: 'Confirmation OTP Code - Farm System',
//       text: 'Your 6 digit OTP Code is',
//       html: '<b>Your six-digit OTP Code is : </b>' + token.otp
//     }
//     await sendGrid.send(msg, (err) => {
//       if (err) {
//         const error = new HttpError('server error', 500)
//         return next(error)
//       }
//     })
//   } catch (err) {
//     const error = new HttpError(err, 400)
//     return next(error)
//   }
// }
// const generateOTP = function (req, res) {
//   const digits = '123456789'
//   let OTP = ''
//   for (let i = 0; i < 6; i++) {
//     OTP += digits[Math.floor(Math.random() * 9)]
//   }
//   res = OTP
//   return res
// }
// const getpassword = async function (req, res) {
//   const secret = 'Farm Users'
//   const password = await bcrypt.hash(secret, 12)
//   res = password
//   return res
// }

// const getpasswordOTP = async function (userDetails, res) {
//   const findme = userDetails
//   const digits = '123456789'
//   let OTP = ''
//   for (let i = 0; i < 4; i++) {
//     OTP += digits[Math.floor(Math.random() * 9)]
//   }
//   const storeme = { $set: { otp: OTP } }
//   const reset = userModel.User.updateOne(findme, storeme, (err) => {
//     new Error(err)
//   })
//     .then(async (data) => {
//       // Send SMS the new otp to set password
//       const msg = {
//         to: userDetails.email,
//         from: fromEmail,
//         subject: 'Reset Password - Farm System',
//         text: 'Your 4 digit OTP Code is',
//         html: '<b>Your four-digit OTP Code is : </b>' + OTP
//       }
//       await sendGrid.send(msg, (err) => {
//         if (err) {
//           const error = new HttpError('server error', 500)
//           return next(error)
//         }
//       })
//     })
//     .catch((err) => {
//       new Error(err)
//       return false
//     })
//   return true
// }
// const getpasswordSMSOTPPage = async function (userDetails, res) {
//   let result = false
//   const findme = userDetails
//   const digits = '123456789'
//   let OTP = ''
//   for (let i = 0; i < 4; i++) {
//     OTP += digits[Math.floor(Math.random() * 9)]
//   }
//   const storeme = { $set: { otp: OTP } }
//   const reset = userModel.User.updateOne(findme, storeme)
//     .then(async (data) => {
//       // Send SMS the new otp to set password
//       const message =
//         'Your four-digit OTP Code for Reset Password Sent :' +
//         OTP +
//         ' Generated By Farm System.'
//       console.log('SMS send Starting', message)
//       const SMS = Mobile.MobileOTP(message, userDetails.mobileNumber)
//       console.log(SMS)
//       SMS ? (result = true) : (result = false)
//     })
//     .catch((err) => {
//       return result
//     })
//   return result
// }

// const updateOTP = function (to, otp, mailDetails) {
//   const dynamicModel = mailDetails.isLoginPage ? userModel : mobileModel
//   const dynamicQuery = mailDetails.isLoginPage
//     ? { 'userDetails.email': to }
//     : { email: to }

//   return new Promise((resolve, reject) => {
//     dynamicModel
//       .updateOne(dynamicQuery, {
//         $set: { mailOtp: otp }
//       })
//       .then(() => {
//         resolve({
//           message: 'updated successfully'
//         }),
//         (err) => {
//           reject({
//             error: err,
//             message: 'unable to update'
//           })
//         }
//       })
//   })
// }

// const checkOTP = function (email, otp) {
//   let result = false
//   email == otp ? (result = true) : (result = false)
//   console.log('Result from checkOTP', result, email, otp)
//   return result
// }
// const resendSMSOTP = async function (mobileNumber, next) {
//   try {
//     let result = false
//     const findme = { mobileNumber: mobileNumber }
//     const code = generateOTP()
//     const storeme = { $set: { otp: code } }
//     const reset = await userModel.User.updateOne(findme, storeme).then((data) => {
//       const message =
//         'Your six-digit OTP Code is Resent :' +
//         code +
//         ' Generated By Farm System.'
//       console.log('SMS Starting', message)
//       const SMS = Mobile.MobileOTP(message, mobileNumber)
//       console.log(SMS)
//       // (SMS) ? response.message = "A verification SMS has been sent to your mobile" : response.message = " SMS not sent! User Created"
//       SMS ? (result = true) : (result = false)
//     })
//     return result
//   } catch (err) {
//     const error = new HttpError('Cannot Update OTP or Send SMS', 400)
//     return next(error)
//   }
// }

// const resendOTP = function (email, next) {
//   let result = false
//   const findme = { email: email }
//   email ? (result = true) : (result = false)
//   const code = generateOTP()
//   const storeme = { $set: { otp: code } }
//   const reset = userModel.User.updateOne(findme, storeme)
//     .then(async (data) => {
//       const msg = {
//         to: email,
//         from: fromEmail,
//         subject: 'Confirmation OTP Code Resend - Farm System',
//         text: 'Your 6 digit OTP Code is Resent',
//         html: '<b>Your six-digit OTP Code is : </b>' + code
//       }
//       await sendGrid.send(msg, (err) => {
//         if (err) {
//           const error = new HttpError('server error', 500)
//           return next(error)
//         }
//       })
//     })
//     .catch((err) => {
//       const error = new HttpError('Cannot Update Token', 400)
//       return next(error)
//     })
//   return result
// }

// const generateToken = function (email) {
//   const resetPasswordtoken = jwt.sign(
//     {
//       email: email
//     },
//     process.env.JWT_KEY,
//     {
//       expiresIn: 5 * 600
//     }
//   )
//   return resetPasswordtoken
// }
// const sendToken = async function (email, access) {
//   const findme = { userMail: email }
//   const storeme = { $set: { token: access } }
//   const msg = {
//     to: email,
//     from: fromEmail,
//     subject: 'Reset Password - Farm System',
//     text: 'Reset Password',
//     html:
//       "<a href='" +
//       process.env.loginUrl +
//       '/farm/setNewPassword/' +
//       email +
//       '/' +
//       access +
//       "'><b>Click here to Reset Password</b></a>"
//   }
//   await userModel.Token.updateOne(findme, storeme, (err) => {
//     new Error(err)
//   }).then(async (data) => {
//     await sendGrid.send(msg, (err) => {
//       if (err) {
//         const error = new HttpError('server error', 500)
//         return next(error)
//       }
//     })
//   })
// }
// const resetPasswordPage = async function (searchvalue, newPassword) {
//   let status = false
//   const findme = { _id: searchvalue }
//   const storeme = { $set: { password: newPassword } }
//   const saveToken = await userModel.User.updateOne(
//     findme,
//     storeme,
//     (err, data) => {
//       err ? (status = false) : (status = true)
//     }
//   )
//   return status
// }
// const resetPage = function (email) {
//   // let result = false;
//   // let findme = { "email": email };
//   // let token = generateToken(email);
//   // let resetMail = sendToken(email, token);
//   // (email) ? result = true : result = false;
//   // return result;
// }

// const signupPage = async function (value, data) {
//   const findme = value
//   let result = false
//   const storeme = {
//     $set: {
//       category: data.categoryType,
//       userName: data.userName,
//       password: data.password
//     }
//   }
//   const reset = await userModel.User.updateOne(findme, storeme, (err, data) => {
//     data ? (result = true) : (result = false)
//   })
//   return result
// }

// exports.code = generateOTP
// exports.pass = getpassword
// exports.check = checkOTP
// exports.resend = resendOTP
// exports.resendSMS = resendSMSOTP
// exports.signup = signupPage
// exports.reset = resetPage
// exports.resetPassword = resetPasswordPage
// exports.getpasswordOTP = getpasswordOTP
// exports.getpasswordSMSOTP = getpasswordSMSOTPPage
